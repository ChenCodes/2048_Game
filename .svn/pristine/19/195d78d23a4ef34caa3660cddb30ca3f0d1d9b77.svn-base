

package game2048;

import ucb.util.CommandArgs;

import game2048.gui.Game;
import static game2048.Main.Side.*;

/** The main class for the 2048 game.
 *  @author Chen Jack
 */
public class Main {

    /** Magic num 2048. */
    static final int MAGICNUMBER = 2048;

    /** Magic num 16. */
    static final int MAGICNUMBER2 = 16;

    /** Size of the board: num of rows and of columns. */
    static final int SIZE = 4;
    /** num of squares on the board. */
    static final int SQUARES = SIZE * SIZE;

    /** Symbolic names for the four sides of a board. */
    static enum Side { NORTH, EAST, SOUTH, WEST };

    /** The main program.  ARGS may contain the options --seed=NUM,
     *  (random seed); --log (record moves and random tiles
     *  selected.); --testing (take random tiles and moves from
     *  standard input); and --no-display. */
    public static void main(String... args) {
        CommandArgs options =
            new CommandArgs("--seed=(\\d+) --log --testing --no-display",
                            args);
        if (!options.ok()) {
            System.err.println("Usage: java game2048.Main [ --seed=NUM ] "
                               + "[ --log ] [ --testing ] [ --no-display ]");
            System.exit(1);
        }

        Main game = new Main(options);

        while (game.play()) {
            /* No action */
        }
        System.exit(0);
    }

    /** A new Main object using OPTIONS as options (as for main). */
    Main(CommandArgs options) {
        boolean log = options.contains("--log"),
            display = !options.contains("--no-display");
        long seed = !options.contains("--seed") ? 0 : options.getLong("--seed");
        _testing = options.contains("--testing");
        _game = new Game("2048", SIZE, seed, log, display, _testing);
    }

    /** Reset the score for the current game to 0 and clear the board. */
    void clear() {
        _score = 0;
        _count = 0;
        _game.clear();
        _game.setScore(_score, _maxScore);
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[r][c] = 0;
            }
        }
    }

    /** Play one game of 2048, updating the maximum score. Return true
     *  iff play should continue with another game, or false to exit. */
    boolean play() {
        clear();
        setRandomPiece();

        while (true) {
            if (!noMoves) {
                setRandomPiece();
            }
            if (gameOver()) {
                _game.setScore(_score, _score);
                // _game.endGame();
                return false;
            }

        GetMove:
            while (true) {
                String key = _game.readKey();

                switch (key) {
                case "Up": case "Down": case "Left": case "Right":
                    if (!gameOver() && tiltBoard(keyToSide(key))) {
                        break GetMove;
                    }
                    break;
                case "Quit":
                    return false;
                case "New Game":
                    clear();
                    return true;
                default:
                    break;
                }
            }
        }
    }

    /** This is a Javadoc comment. */
    private boolean noMoves;

    /** Return true iff the current game is over (no more moves
     *  possible). */
    boolean gameOver() {
        if (_count == SQUARES) {
            for (int c = 0; c <= SIZE - 1; c++) {
                for (int r = 0; r <= SIZE - 1; r++) {
                    if (_board[r][c] == MAGICNUMBER) {
                        return true;
                    }
                    if (c == 0 && r == 0) {
                        if (_board[r][c] != _board[r][c + 1]
                            && _board[r][c] != _board[r + 1][c]) {
                            continue;
                        } else {
                            return false;
                        }
                    }
                    if (c == 0 && r == 3) {
                        if (_board[r][c] != _board[r][c + 1]) {
                            continue;
                        } else {
                            return false;
                        }
                    }
                    if (c == 3 && r < 3) {
                        continue;
                    } else if (c == 3 && r == 3) {
                        return true;
                    }
                    if (r == 3) {
                        if (_board[r][c] != _board[r][c + 1]) {
                            continue;
                        } else {
                            return false;
                        }
                    }
                    if (c == 0) {
                        if (_board[r][c] != _board[r][c + 1]
                            && _board[r][c] != _board[r + 1][c]) {
                            continue;
                        } else {
                            return false;
                        }
                    }
                    if (_board[r][c] != _board[r][c + 1]
                        || _board[r][c] != _board[r + 1][c]) {
                        continue;
                    } else {
                        return false;
                    }

                }
            }
        }
        return false;
    }
    /** Add a tile to a random, empty position, choosing a value (2 or
     *  4) at random.  Has no effect if the board is currently full. */
    void setRandomPiece() {
        if (_count == SQUARES) {
            return;
        }
        int[] items = _game.getRandomTile();
        int value = items[0];
        int row = items[1];
        int col = items[2];

        if (_board[row][col] == 0) {
            _game.addTile(value, row, col);
            _game.displayMoves();
            _count += 1;
            _board[row][col] = value;
        } else {
            setRandomPiece();
        }
    }

    /** Perform the result of tilting the board toward SIDE.
     *  Returns true iff the tilt changes the board. **/
    boolean tiltBoard(Side side) {
        /* As a suggestion (see the project text), you might try copying
         * the board to a local array, turning it so that edge SIDE faces
         * north.  That way, you can re-use the same logic for all
         * directions.  (As usual, you don't have to). */
        int[][] board = new int[SIZE][SIZE];
        for (int c = 0; c <= SIZE - 1; c++) {
            boolean merged = false;
            for (int r = 0; r <= SIZE - 1; r++) {
                board[r][c] = _board[tiltRow(side, r, c)][tiltCol(side, r, c)];
                if (r == 0) {
                    continue;
                } else if (board[r][c] == 0) {
                    continue;
                } else if (board[r][c] != 0) {
                    int up = r - 1;
                    int num = 0;
                    int changeRow = 0;
                    if (up == 0) {
                        if (up == 0 && board[0][c] == 0) {
                            num = 0;
                        } else if (up == 0 && board[0][c] != 0) {
                            num = board[0][c];
                        }
                    } else {
                        while (board[up][c] == 0 && up != 0) {
                            up = up - 1;
                        }
                        num = board[up][c];
                        changeRow = up;
                    }
                    noMoves = false;
                    int cuTile = board[r][c];
                    if (num != cuTile && num != 0 && up == 0 && up + 1 == r) {
                        continue;
                    } else if (num != cuTile && num != 0 && up == 0) {
                        moveCoordinates(side, changeRow + 1, r, c, board);
                    } else if (num != cuTile && num != 0 && up == 1 && r == 2) {
                        continue;
                    } else if (num != cuTile && num != 0 && up == 1 && r == 3) {
                        moveCoordinates(side, changeRow + 1, r, c, board);
                    } else if (num == 0 && board[r][c] != 0) {
                        moveCoordinates(side, 0, r, c, board);
                    } else if (num == cuTile && (up <= 2)) {
                        if (!merged) {
                            merged = true;
                            mergeCoordinates(side, up, r, c, board);
                        } else {
                            moveCoordinates(side, changeRow + 1, r, c, board);
                        }
                    } else {
                        noMoves = true;
                    }
                }
            }
        }
        
        _game.displayMoves();
        finishCopy(board, side);
        // for (int c = 0; c < SIZE; c += 1) {
        //     for (int r = 0; r < SIZE; r += 1) {
        //         System.out.print(_board[r][c] + " ");
        //     }
        // }
        return true;
    }

    /** This is a javadoc comment.
        @param board1 This is board
        @param side This is side
        */
    public void finishCopy(int[][] board1, Side side) {
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[tiltRow(side, r, c)][tiltCol(side, r, c)] = board1[r][c];
            }
        }
    }

    /** This is a javadoc comment.
        @param side This is side
        @param changedRow This is changedrow
        @param previousRow This is previousrow
        @param previousCol This is previouscol
        @param board1 This is board
         */
    public void moveCoordinates(Side side, int changedRow, int previousRow,
        int previousCol, int[][] board1) {
        _game.moveTile(board1[previousRow][previousCol], tiltRow(side,
            previousRow, previousCol), tiltCol(side, previousRow, previousCol),
            tiltRow(side, changedRow, previousCol), tiltCol(side, changedRow,
                previousCol));
        board1[changedRow][previousCol] = board1[previousRow][previousCol];
        board1[previousRow][previousCol] = 0;
    }

    /** This is a javadoc comment.
        @param side side
        @param changedRow changedRow
        @param previousRow previousRow
        @param previousCol board1
        @param board1 board1 */
    public void mergeCoordinates(Side side, int changedRow, int previousRow,
        int previousCol, int[][] board1) {
        _game.mergeTile(board1[previousRow][previousCol], board1[previousRow]
            [previousCol] * 2, tiltRow(side, previousRow, previousCol),
            tiltCol(side, previousRow, previousCol), tiltRow(side,
                changedRow, previousCol), tiltCol(side, changedRow,
                previousCol));
        _count -= 1;
        _score = _score + (2 * board1[previousRow][previousCol]);
        _game.setScore(_score, 0);
        board1[changedRow][previousCol] = board1[changedRow]
            [previousCol] + board1[previousRow][previousCol];
        board1[previousRow][previousCol] = 0;

    }


    /** Return the row num on a playing board that corresponds to row R
     *  and column C of a board turned so that row 0 is in direction SIDE (as
     *  specified by the definitions of NORTH, EAST, etc.).  So, if SIDE
     *  is NORTH, then tiltRow simply returns R (since in that case, the
     *  board is not turned).  If SIDE is WEST, then column 0 of the tilted
     *  board corresponds to row SIZE - 1 of the untilted board, and
     *  tiltRow returns SIZE - 1 - C. */
    int tiltRow(Side side, int r, int c) {
        switch (side) {
        case NORTH:
            return r;
        case EAST:
            return c;
        case SOUTH:
            return SIZE - 1 - r;
        case WEST:
            return SIZE - 1 - c;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the column num on a playing board that corresponds to row
     *  R and column C of a board turned so that row 0 is in direction SIDE
     *  (as specified by the definitions of NORTH, EAST, etc.). So, if SIDE
     *  is NORTH, then tiltCol simply returns C (since in that case, the
     *  board is not turned).  If SIDE is WEST, then row 0 of the tilted
     *  board corresponds to column 0 of the untilted board, and tiltCol
     *  returns R. */
    int tiltCol(Side side, int r, int c) {
        switch (side) {
        case NORTH:
            return c;
        case EAST:
            return SIZE - 1 - r;
        case SOUTH:
            return SIZE - 1 - c;
        case WEST:
            return r;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the side indicated by KEY ("Up", "Down", "Left",
     *  or "Right"). */
    Side keyToSide(String key) {
        switch (key) {
        case "Up":
            return NORTH;
        case "Down":
            return SOUTH;
        case "Left":
            return WEST;
        case "Right":
            return EAST;
        default:
            throw new IllegalArgumentException("unknown key designation");
        }
    }

    /** Represents the board: _board[r][c] is the tile value at row R,
     *  column C, or 0 if there is no tile there. */
    private final int[][] _board = new int[SIZE][SIZE];

    /** True iff --testing option selected. */
    private boolean _testing;
    /** THe current input source and output sink. */
    private Game _game;
    /** The score of the current game, and the maximum final score
     *  over all games in this session. */
    private int _score, _maxScore;
    /** num of tiles on the board. */
    private int _count;
}
